package main

import (
	"context"
	"encoding/json"
	"io/ioutil"
	"os"
	"path/filepath"
	"runtime"
	"time"

	"github.com/alecthomas/kingpin"
	foundation "github.com/estafette/estafette-foundation"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/rs/zerolog/log"

	"github.com/ericchiang/k8s"
	appsv1 "github.com/ericchiang/k8s/apis/apps/v1"
	batchv1 "github.com/ericchiang/k8s/apis/batch/v1"
	batchv1beta1 "github.com/ericchiang/k8s/apis/batch/v1beta1"
	corev1 "github.com/ericchiang/k8s/apis/core/v1"
)

var (
	appgroup  string
	app       string
	version   string
	branch    string
	revision  string
	buildDate string
	goVersion = runtime.Version()
)

var (
	stateFileDirectory     = kingpin.Flag("state-file-directory", "Directory the state file is mounted to.").Default("/state").Envar("STATE_FILE_DIRECTORY").String()
	stateFileName          = kingpin.Flag("state-file-name", "Name of the state file.").Default("state.json").Envar("STATE_FILE_NAME").String()
	stateFileConfigmapName = kingpin.Flag("state-file-configmap-name", "Name of the configmap storing the state file.").Envar("STATE_FILE_CONFIGMAP_NAME").String()
	releaseName            = kingpin.Flag("release-name", "Name of Helm release (set as label on prometheus metrics).").Envar("RELEASE_NAME").Required().String()

	// define prometheus metrics
	detectedVulnerabilities = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "estafette_vulnerability_scanner_detected_vulnerabilities",
			Help: "Vulnerabilities found in scanned images",
		},
		[]string{"release", "image", "severity"},
	)

	scannedImagesTotals = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "estafette_vulnerability_scanner_scanned_images_total",
			Help: "Number of scanned images",
		},
		[]string{"release", "status"},
	)

	updatedDatabaseTotals = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "estafette_vulnerability_scanner_updated_database_total",
			Help: "Number of database updates",
		},
		[]string{"release", "status"},
	)
)

func init() {
	prometheus.MustRegister(detectedVulnerabilities)
	prometheus.MustRegister(scannedImagesTotals)
	prometheus.MustRegister(updatedDatabaseTotals)

	k8s.Register("", "v1", "events", true, &corev1.Event{})
	k8s.RegisterList("", "v1", "events", true, &corev1.EventList{})
}

func main() {

	// parse command line parameters
	kingpin.Parse()

	// init log format from envvar ESTAFETTE_LOG_FORMAT
	foundation.InitLoggingFromEnv(foundation.NewApplicationInfo(appgroup, app, version, branch, revision, buildDate))

	// create context to cancel commands on sigterm
	ctx := foundation.InitCancellationContext(context.Background())

	// create kubernetes api client
	kubeClient, err := k8s.NewInClusterClient()
	if err != nil {
		log.Fatal().Err(err)
	}

	// create vulnerability scanner
	scanner := NewScanner(ctx)

	// define channel used to gracefully shutdown the application
	gracefulShutdown, _ := foundation.InitGracefulShutdownHandling()

	// read state from file
	log.Info().Msgf("Reading state from state file...")
	vulnerabilityReportState, err := readStateFromStateFile()
	if err != nil {
		log.Error().Err(err).Msg("Failed reading state from state file, resetting state...")
		vulnerabilityReportState = map[string]map[string]float64{}
	} else {
		log.Info().Msgf("Read state for %v images", len(vulnerabilityReportState))
	}

	// expose metrics from previous run
	exposeVulnerabilitiesMetrics(detectedVulnerabilities, vulnerabilityReportState)

	// start prometheus
	foundation.InitMetrics()

	go func() {
		// loop indefinitely
		for {

			images, err := getReferencedImages(kubeClient)

			if err != nil {
				log.Error().Err(err).Msg("Failed retrieving all referenced container images")

				// sleep random time around 3 minutes
				sleepTime := foundation.ApplyJitter(180)
				log.Info().Msgf("Sleeping for %v seconds...", sleepTime)
				time.Sleep(time.Duration(sleepTime) * time.Second)

				// skip remaining steps
				continue
			}

			// remove unused images from state
			imagesBeforePurge := len(vulnerabilityReportState)
			purgeObsoleteState(vulnerabilityReportState, images)
			log.Info().Msgf("Purged unused images from state. Before: %v images. After: %v images", imagesBeforePurge, len(vulnerabilityReportState))

			// scan all images
			scanImages(scanner, vulnerabilityReportState, images, detectedVulnerabilities, scannedImagesTotals, updatedDatabaseTotals, true)
			log.Info().Msgf("Has state for %v images after scanning", len(vulnerabilityReportState))

			log.Info().Msgf("Writing state to configmap...")
			err = writeStateToConfigmap(kubeClient, vulnerabilityReportState)
			if err != nil {
				log.Fatal().Err(err).Msg("Failed writing state to configmap")
			}

			// sleep random time around 3 minutes (making sure it's less than the 5 minutes staleness limit for prometheus metrics)
			sleepTime := foundation.ApplyJitter(180)
			log.Info().Msgf("Sleeping for %v seconds...", sleepTime)
			time.Sleep(time.Duration(sleepTime) * time.Second)
		}
	}()

	// watch pods for all namespaces to quickly detect any new images
	go func() {
		// loop indefinitely
		for {
			log.Info().Msg("Watching pods for all namespaces...")
			var pod corev1.Pod
			watcher, err := kubeClient.Watch(context.Background(), k8s.AllNamespaces, &pod, k8s.Timeout(time.Duration(300)*time.Second))
			defer watcher.Close()

			if err != nil {
				log.Error().Err(err)
			} else {
				// loop indefinitely, unless it errors
				for {
					pod := new(corev1.Pod)
					eventType, err := watcher.Next(pod)
					if err != nil {
						log.Error().Err(err)
						break
					}

					if eventType == k8s.EventAdded {
						scanAddedPod(scanner, vulnerabilityReportState, pod, detectedVulnerabilities, scannedImagesTotals, updatedDatabaseTotals)
					}
				}
			}

			// sleep random time around 30 second to prevent hammering the kubernetes api in case of errors
			sleepTime := foundation.ApplyJitter(30)
			log.Info().Msgf("Sleeping for %v seconds...", sleepTime)
			time.Sleep(time.Duration(sleepTime) * time.Second)
		}
	}()

	signalReceived := <-gracefulShutdown
	log.Info().Msgf("Received signal %v. Shutting down...", signalReceived)
}

func scanAddedPod(scanner Scanner, vulnerabilityReportState map[string]map[string]float64, pod *corev1.Pod, detectedVulnerabilities *prometheus.GaugeVec, scannedImagesTotals, updatedDatabaseTotals *prometheus.CounterVec) {

	log.Info().Msgf("Pod %v was added, checking for new images...", pod.GetMetadata().GetName())

	// get images for added pod
	images := getImagesForPodSpec(pod.Spec)

	// check if any of the images are new to the cluster
	newImages := []string{}
	for _, image := range images {
		if _, ok := vulnerabilityReportState[image]; !ok {
			newImages = append(newImages, image)
		}
	}

	if len(newImages) == 0 {
		return
	}

	log.Info().Msgf("Found %v new images in added pod %v, scanning them for vulnerabilities...", len(newImages), pod.GetMetadata().GetName())

	// scan the new images
	scanImages(scanner, vulnerabilityReportState, newImages, detectedVulnerabilities, scannedImagesTotals, updatedDatabaseTotals, false)
}

func getReferencedImages(kubeClient *k8s.Client) (images []string, err error) {
	// pod images
	var podList corev1.PodList
	if err = kubeClient.List(context.Background(), k8s.AllNamespaces, &podList); err != nil {
		return
	}
	images = append(images, getImagesForPods(podList.Items)...)

	// deployment images
	var deploymentList appsv1.DeploymentList
	if err = kubeClient.List(context.Background(), k8s.AllNamespaces, &deploymentList); err != nil {
		return
	}
	images = append(images, getImagesForDeployments(deploymentList.Items)...)

	// daemonset images
	var daemonsetList appsv1.DaemonSetList
	if err = kubeClient.List(context.Background(), k8s.AllNamespaces, &daemonsetList); err != nil {
		return
	}
	images = append(images, getImagesForDaemonSets(daemonsetList.Items)...)

	// statefulset images
	var statefulsetList appsv1.StatefulSetList
	if err = kubeClient.List(context.Background(), k8s.AllNamespaces, &statefulsetList); err != nil {
		return
	}
	images = append(images, getImagesForStatefulSets(statefulsetList.Items)...)

	// job images
	var jobList batchv1.JobList
	if err = kubeClient.List(context.Background(), k8s.AllNamespaces, &jobList); err != nil {
		return
	}
	images = append(images, getImagesForJobs(jobList.Items)...)

	// cronjob images
	var cronjobList batchv1beta1.CronJobList
	if err = kubeClient.List(context.Background(), k8s.AllNamespaces, &cronjobList); err != nil {
		return
	}
	images = append(images, getImagesForCronJobs(cronjobList.Items)...)

	// dedupe images
	images = dedupeImages(images)

	return images, nil
}

func purgeObsoleteState(vulnerabilityReportState map[string]map[string]float64, images []string) {

	for image := range vulnerabilityReportState {
		if !foundation.StringArrayContains(images, image) {
			delete(vulnerabilityReportState, image)
		}
	}
}

func scanImages(scanner Scanner, vulnerabilityReportState map[string]map[string]float64, images []string, detectedVulnerabilities *prometheus.GaugeVec, scannedImagesTotals, updatedDatabaseTotals *prometheus.CounterVec, refreshDatabase bool) {

	if refreshDatabase {
		// update vulnerability db
		log.Info().Msg("Updating trivy database...")
		err := scanner.UpdateDatabase()
		dbUpdateStatus := "succeeded"
		if err != nil {
			log.Error().Err(err).Msgf("Failed to update trivy database")
			dbUpdateStatus = "failed"
		}
		if updatedDatabaseTotals != nil {
			updatedDatabaseTotals.With(prometheus.Labels{"release": *releaseName, "status": dbUpdateStatus}).Inc()
		}
	}

	for _, image := range images {
		// scan each image
		log.Info().Msgf("Scanning container image %v for vulnerabilities...", image)
		vulnerabilityReports, err := scanner.ScanImage(image)

		// store state if no error has happened or if the key doesn't exist in the map yet
		if _, ok := vulnerabilityReportState[image]; !ok || err == nil {
			vulnerabilityReportState[image] = groupReportPerLevel(vulnerabilityReports)
		}

		scanStatus := "succeeded"
		if err != nil {
			log.Error().Err(err).Msgf("Scanning image %v failed", image)
			scanStatus = "failed"
		}
		if scannedImagesTotals != nil {
			scannedImagesTotals.With(prometheus.Labels{"release": *releaseName, "status": scanStatus}).Inc()
		}

		exposeVulnerabilitiesMetrics(detectedVulnerabilities, vulnerabilityReportState)

		if len(vulnerabilityReports) > 0 {
			log.Warn().Msgf("Image %v has %v vulnerabilities!", image, len(vulnerabilityReports[0].Vulnerabilities))
		}
	}
}

func exposeVulnerabilitiesMetrics(detectedVulnerabilities *prometheus.GaugeVec, vulnerabilityReportState map[string]map[string]float64) {
	// set # of vulnerabilities in prometheus metric
	if detectedVulnerabilities != nil {

		// reset first so no stale images or vulnerabilities are reported
		detectedVulnerabilities.Reset()

		// loop all reports and expose them as metrics in order to keep them fresh (prometheus metrics turn stale after 5 minutes)
		for im, groupedReport := range vulnerabilityReportState {
			if len(groupedReport) > 0 {
				for severity, v := range groupedReport {
					detectedVulnerabilities.With(prometheus.Labels{"release": *releaseName, "image": im, "severity": severity}).Set(v)
				}
			} else {
				detectedVulnerabilities.With(prometheus.Labels{"release": *releaseName, "image": im, "severity": ""}).Set(float64(0))
			}
		}
	}
}

func getImagesForPodSpec(podspec *corev1.PodSpec) (images []string) {
	if podspec != nil {
		// loop InitContainers and collect images
		if podspec.InitContainers != nil {
			for _, c := range podspec.InitContainers {
				if c != nil {
					image := c.GetImage()
					images = append(images, image)
				}
			}
		}

		// loop Containers and collect images
		if podspec.Containers != nil {
			for _, c := range podspec.Containers {
				if c != nil {
					image := c.GetImage()
					images = append(images, image)
				}
			}
		}
	}

	return
}

func getImagesForPods(pods []*corev1.Pod) (images []string) {

	for _, p := range pods {
		if p != nil {
			images = append(images, getImagesForPodSpec(p.Spec)...)
		}
	}

	return
}

func getImagesForDeployments(deployments []*appsv1.Deployment) (images []string) {

	for _, d := range deployments {
		if d != nil {
			if d.Spec != nil && d.Spec.Template != nil {
				images = append(images, getImagesForPodSpec(d.Spec.Template.Spec)...)
			}
		}
	}

	return
}

func getImagesForDaemonSets(daemonsets []*appsv1.DaemonSet) (images []string) {

	for _, d := range daemonsets {
		if d != nil {
			if d.Spec != nil && d.Spec.Template != nil {
				images = append(images, getImagesForPodSpec(d.Spec.Template.Spec)...)
			}
		}
	}

	return
}

func getImagesForStatefulSets(statefulsets []*appsv1.StatefulSet) (images []string) {

	for _, s := range statefulsets {
		if s != nil {
			if s.Spec != nil && s.Spec.Template != nil {
				images = append(images, getImagesForPodSpec(s.Spec.Template.Spec)...)
			}
		}
	}

	return
}

func getImagesForJobs(jobs []*batchv1.Job) (images []string) {

	for _, j := range jobs {
		if j != nil {
			if j.Spec != nil && j.Spec.Template != nil {
				images = append(images, getImagesForPodSpec(j.Spec.Template.Spec)...)
			}
		}
	}

	return
}

func getImagesForCronJobs(cronjobs []*batchv1beta1.CronJob) (images []string) {

	for _, c := range cronjobs {
		if c != nil {
			if c.Spec != nil && c.Spec.JobTemplate.Spec.Template != nil {
				images = append(images, getImagesForPodSpec(c.Spec.JobTemplate.Spec.Template.Spec)...)
			}
		}
	}

	return
}

func dedupeImages(images []string) (dedupedImages []string) {

	for _, image := range images {
		if image != "" && !foundation.StringArrayContains(dedupedImages, image) {
			dedupedImages = append(dedupedImages, image)
		}
	}

	return
}

func groupReportPerLevel(vulnerabilityReports []VulnerabilityReport) (groupedReport map[string]float64) {

	groupedReport = map[string]float64{}

	for _, r := range vulnerabilityReports {
		for _, v := range r.Vulnerabilities {

			// ignore vulnerabilities without a fix
			if v.FixedVersion == "" {
				continue
			}

			if val, ok := groupedReport[v.Severity]; ok {
				groupedReport[v.Severity] = val + 1
			} else {
				groupedReport[v.Severity] = 1
			}
		}
	}

	return
}

func readStateFromStateFile() (map[string]map[string]float64, error) {

	vulnerabilityReportState := map[string]map[string]float64{}

	stateFilePath := filepath.Join(*stateFileDirectory, *stateFileName)

	// check if state file exists in configmap
	if _, err := os.Stat(stateFilePath); !os.IsNotExist(err) {

		log.Info().Msgf("File %v exists, reading contents...", stateFilePath)

		// read state file
		data, err := ioutil.ReadFile(stateFilePath)
		if err != nil {
			return vulnerabilityReportState, err
		}

		log.Info().Msgf("Unmarshalling file %v contents...", stateFilePath)

		// unmarshal state file
		if err := json.Unmarshal(data, &vulnerabilityReportState); err != nil {
			return vulnerabilityReportState, err
		}
	}

	return vulnerabilityReportState, nil
}

func writeStateToConfigmap(kubeClient *k8s.Client, vulnerabilityReportState map[string]map[string]float64) error {

	// retrieve configmap
	var configMap corev1.ConfigMap
	err := kubeClient.Get(context.Background(), kubeClient.Namespace, *stateFileConfigmapName, &configMap)
	if err != nil {
		return err
	}

	// marshal state to json
	stateData, err := json.Marshal(vulnerabilityReportState)

	if configMap.Data == nil {
		configMap.Data = make(map[string]string)
	}

	configMap.Data[*stateFileName] = string(stateData)

	// update configmap to have state available when the application runs the next time and for other applications
	err = kubeClient.Update(context.Background(), &configMap)
	if err != nil {
		return err
	}

	log.Info().Msgf("Stored state in configmap %v...", *stateFileConfigmapName)
	return nil
}
