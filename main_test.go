package main

import (
	"testing"

	corev1 "github.com/ericchiang/k8s/apis/core/v1"
	"github.com/stretchr/testify/assert"
)

func TestGetUniqueContainerImages(t *testing.T) {

	t.Run("ReturnsEmptyListForNoPods", func(t *testing.T) {

		pods := []*corev1.Pod{}

		// act
		images := getUniqueContainerImages(pods)

		assert.Equal(t, 0, len(images))
	})

	t.Run("ReturnsImagesForAllPodContainers", func(t *testing.T) {

		image0 := "estafette/estafette-ci-api:1.0.0"
		image1 := "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47"

		pods := []*corev1.Pod{
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &image0,
						},
						&corev1.Container{
							Image: &image1,
						},
					},
				},
			},
		}

		// act
		images := getUniqueContainerImages(pods)

		if assert.Equal(t, 2, len(images)) {
			assert.Equal(t, "estafette/estafette-ci-api:1.0.0", images[0])
			assert.Equal(t, "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47", images[1])
		}
	})

	t.Run("ReturnsImagesForAllPodContainersIncludingInitContainers", func(t *testing.T) {

		image0 := "estafette/estafette-ci-api-init:1.0.0"
		image1 := "estafette/estafette-ci-api:1.0.0"
		image2 := "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47"

		pods := []*corev1.Pod{
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					InitContainers: []*corev1.Container{
						&corev1.Container{
							Image: &image0,
						},
					},
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &image1,
						},
						&corev1.Container{
							Image: &image2,
						},
					},
				},
			},
		}

		// act
		images := getUniqueContainerImages(pods)

		if assert.Equal(t, 3, len(images)) {
			assert.Equal(t, "estafette/estafette-ci-api-init:1.0.0", images[0])
			assert.Equal(t, "estafette/estafette-ci-api:1.0.0", images[1])
			assert.Equal(t, "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47", images[2])
		}
	})

	t.Run("ReturnsImagesForMultiplePods", func(t *testing.T) {

		imageA0 := "estafette/estafette-ci-api:1.0.0"
		imageA1 := "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47"
		imageB0 := "estafette/estafette-ci-web:1.0.0"
		imageB1 := "estafette/openresty-sidecar:0.8.0-opentracing"

		pods := []*corev1.Pod{
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &imageA0,
						},
						&corev1.Container{
							Image: &imageA1,
						},
					},
				},
			},
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &imageB0,
						},
						&corev1.Container{
							Image: &imageB1,
						},
					},
				},
			},
		}

		// act
		images := getUniqueContainerImages(pods)

		if assert.Equal(t, 4, len(images)) {
			assert.Equal(t, "estafette/estafette-ci-api:1.0.0", images[0])
			assert.Equal(t, "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47", images[1])
			assert.Equal(t, "estafette/estafette-ci-web:1.0.0", images[2])
			assert.Equal(t, "estafette/openresty-sidecar:0.8.0-opentracing", images[3])
		}
	})

	t.Run("ReturnsImagesDeduped", func(t *testing.T) {

		imageA0 := "estafette/estafette-ci-api-init:1.0.0"
		imageA1 := "estafette/estafette-ci-api:1.0.0"
		imageA2 := "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47"
		imageB0 := "estafette/estafette-ci-api-init:1.0.0"
		imageB1 := "estafette/estafette-ci-api:1.0.0"
		imageB2 := "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47"

		pods := []*corev1.Pod{
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					InitContainers: []*corev1.Container{
						&corev1.Container{
							Image: &imageA0,
						},
					},
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &imageA1,
						},
						&corev1.Container{
							Image: &imageA2,
						},
					},
				},
			},
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					InitContainers: []*corev1.Container{
						&corev1.Container{
							Image: &imageB0,
						},
					},
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &imageB1,
						},
						&corev1.Container{
							Image: &imageB2,
						},
					},
				},
			},
		}

		// act
		images := getUniqueContainerImages(pods)

		if assert.Equal(t, 3, len(images)) {
			assert.Equal(t, "estafette/estafette-ci-api-init:1.0.0", images[0])
			assert.Equal(t, "estafette/estafette-ci-api:1.0.0", images[1])
			assert.Equal(t, "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47", images[2])
		}
	})
}

func TestGetContainerImagesForCurrentNode(t *testing.T) {

	t.Run("ReturnsEmptyListForNoPods", func(t *testing.T) {

		pods := []*corev1.Pod{}

		// act
		images := getContainerImagesForCurrentNode(pods, "mynode")

		assert.Equal(t, 0, len(images))
	})

	t.Run("ReturnsImagesForAllPodContainersOnThisNode", func(t *testing.T) {

		image0 := "estafette/estafette-ci-api:1.0.0"
		image1 := "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47"
		mynode := "mynode"

		pods := []*corev1.Pod{
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					NodeName: &mynode,
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &image0,
						},
						&corev1.Container{
							Image: &image1,
						},
					},
				},
			},
		}

		// act
		images := getContainerImagesForCurrentNode(pods, "mynode")

		if assert.Equal(t, 2, len(images)) {
			assert.Equal(t, "estafette/estafette-ci-api:1.0.0", images[0])
			assert.Equal(t, "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47", images[1])
		}
	})

	t.Run("ExcludesImagesForAllPodOnOtherNodes", func(t *testing.T) {

		image0 := "estafette/estafette-ci-api:1.0.0"
		image1 := "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47"
		othernode := "othernode"

		pods := []*corev1.Pod{
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					NodeName: &othernode,
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &image0,
						},
						&corev1.Container{
							Image: &image1,
						},
					},
				},
			},
		}

		// act
		images := getContainerImagesForCurrentNode(pods, "mynode")

		assert.Equal(t, 0, len(images))
	})

	t.Run("ReturnsImagesForPodsOnThisNodeAndExcludesImagesForAllPodOnOtherNodes", func(t *testing.T) {

		imageA0 := "estafette/estafette-ci-api:1.0.0"
		imageA1 := "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47"
		imageB0 := "estafette/estafette-ci-web:1.0.0"
		imageB1 := "estafette/openresty-sidecar:0.8.0-opentracing"

		mynode := "mynode"
		othernode := "othernode"

		pods := []*corev1.Pod{
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					NodeName: &mynode,
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &imageA0,
						},
						&corev1.Container{
							Image: &imageA1,
						},
					},
				},
			},
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					NodeName: &othernode,
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &imageB0,
						},
						&corev1.Container{
							Image: &imageB1,
						},
					},
				},
			},
		}

		// act
		images := getContainerImagesForCurrentNode(pods, "mynode")

		if assert.Equal(t, 2, len(images)) {
			assert.Equal(t, "estafette/estafette-ci-api:1.0.0", images[0])
			assert.Equal(t, "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47", images[1])
		}
	})
}

type mockScanner struct {
	ScanImageFunc      func(image string) (vulnerabilityReports []VulnerabilityReport, err error)
	RemoveImageFunc    func(image string) (err error)
	UpdateDatabaseFunc func() (err error)
}

func (s mockScanner) ScanImage(image string) (vulnerabilityReports []VulnerabilityReport, err error) {
	if s.ScanImageFunc == nil {
		return
	}
	return s.ScanImageFunc(image)
}

func (s mockScanner) RemoveImage(image string) (err error) {
	if s.RemoveImageFunc == nil {
		return
	}
	return s.RemoveImageFunc(image)
}

func (s mockScanner) UpdateDatabase() (err error) {
	if s.UpdateDatabaseFunc == nil {
		return
	}
	return s.UpdateDatabaseFunc()
}

func TestScanPods(t *testing.T) {

	t.Run("DoesNotCallScanPodsForEmptyListOfPods", func(t *testing.T) {

		pods := []*corev1.Pod{}

		callCount := 0
		scanner := mockScanner{}
		scanner.ScanImageFunc = func(image string) (vulnerabilityReports []VulnerabilityReport, err error) {
			callCount++
			return
		}

		// act
		scanPods(scanner, pods, "mynode", nil, nil, nil)

		assert.Equal(t, 0, callCount)
	})

	t.Run("CallsScanPodsForEveryUniqueImage", func(t *testing.T) {

		image0 := "estafette/estafette-ci-api:1.0.0"
		image1 := "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47"

		pods := []*corev1.Pod{
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &image0,
						},
						&corev1.Container{
							Image: &image1,
						},
					},
				},
			},
		}

		callCount := 0
		scanner := mockScanner{}
		scanner.ScanImageFunc = func(image string) (vulnerabilityReports []VulnerabilityReport, err error) {
			callCount++
			return
		}

		// act
		scanPods(scanner, pods, "mynode", nil, nil, nil)

		assert.Equal(t, 2, callCount)
	})

	t.Run("CallsRemoveImageForEveryImageNotOnThisNode", func(t *testing.T) {

		imageA0 := "estafette/estafette-ci-api:1.0.0"
		imageA1 := "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47"
		imageB0 := "estafette/estafette-ci-web:1.0.0"
		imageB1 := "estafette/openresty-sidecar:0.8.0-opentracing"

		mynode := "mynode"
		othernode := "othernode"

		pods := []*corev1.Pod{
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					NodeName: &mynode,
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &imageA0,
						},
						&corev1.Container{
							Image: &imageA1,
						},
					},
				},
			},
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					NodeName: &othernode,
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &imageB0,
						},
						&corev1.Container{
							Image: &imageB1,
						},
					},
				},
			},
		}

		callCount := 0
		scanner := mockScanner{}
		scanner.RemoveImageFunc = func(image string) (err error) {
			callCount++
			return
		}

		// act
		scanPods(scanner, pods, "mynode", nil, nil, nil)

		assert.Equal(t, 2, callCount)
	})

	t.Run("CallsUpdateDatabaseOnce", func(t *testing.T) {

		imageA0 := "estafette/estafette-ci-api:1.0.0"
		imageA1 := "estafette/openresty-sidecar@sha256:1a58f708fed5d04074c2dcbe293d46eacec4f10fcd2fc86dc6b6885ea2246e47"
		imageB0 := "estafette/estafette-ci-web:1.0.0"
		imageB1 := "estafette/openresty-sidecar:0.8.0-opentracing"

		mynode := "mynode"
		othernode := "othernode"

		pods := []*corev1.Pod{
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					NodeName: &mynode,
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &imageA0,
						},
						&corev1.Container{
							Image: &imageA1,
						},
					},
				},
			},
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					NodeName: &mynode,
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &imageA0,
						},
						&corev1.Container{
							Image: &imageA1,
						},
					},
				},
			},
			&corev1.Pod{
				Spec: &corev1.PodSpec{
					NodeName: &othernode,
					Containers: []*corev1.Container{
						&corev1.Container{
							Image: &imageB0,
						},
						&corev1.Container{
							Image: &imageB1,
						},
					},
				},
			},
		}

		callCount := 0
		scanner := mockScanner{}
		scanner.UpdateDatabaseFunc = func() (err error) {
			callCount++
			return
		}

		// act
		scanPods(scanner, pods, "mynode", nil, nil, nil)

		assert.Equal(t, 1, callCount)
	})
}
