package main

import (
	"context"
	"encoding/json"
	"strings"

	foundation "github.com/estafette/estafette-foundation"
	"github.com/rs/zerolog/log"
)

type Scanner interface {
	ScanImage(image string) (vulnerabilityReports []VulnerabilityReport, err error)
	RemoveImage(image string)
	UpdateDatabase()
}

// NewScanner returns a new Scanner
func NewScanner(ctx context.Context) Scanner {
	return &scanner{
		ctx: ctx,
	}
}

type scanner struct {
	ctx context.Context
}

func (s *scanner) ScanImage(image string) (vulnerabilityReports []VulnerabilityReport, err error) {

	log.Info().Msgf("Scanning container image %v for vulnerabilities...", image)

	output, trivyErr := foundation.GetCommandWithArgsOutput(s.ctx, "/trivy", []string{"--quiet", "--light", "--skip-update", "--no-progress", "--exit-code", "15", "--ignore-unfixed", "--cache-dir", "/trivy-cache", "--format", "json", image})
	if trivyErr != nil {
		if strings.EqualFold(err.Error(), "exit status 1") {
			// ignore exit code, until trivy fixes this on their side, see https://github.com/aquasecurity/trivy/issues/8
			// log.Info().Msg("Ignoring Unknown OS error")
		} else if strings.EqualFold(err.Error(), "exit status 15") {
			// log.Info().Msgf("Image %v has vulnerabilities!", image)
			err = json.Unmarshal([]byte(output), &vulnerabilityReports)
			// if err != nil {
			// 	log.Error().Err(err).Str("output", output).Msgf("Failed unmarshalling json output for image %v", image)
			// }
		} else {
			// log.Error().Err(err).Msgf("Executing trivy failed")
			err = trivyErr
		}
		// } else {
		// 	log.Info().Msgf("Hurray, image %v has NO vulnerabilities", image)
	}

	return
}

func (s *scanner) RemoveImage(image string) {

	log.Info().Msgf("Removing container image %v (not needed on this node)...", image)

	err := foundation.RunCommandWithArgsExtended(s.ctx, "docker", []string{"rmi", image})
	if err != nil {
		log.Error().Err(err).Msgf("Failed to remove image %v", image)
	} else {
		log.Info().Msgf("Succesfully remove image %v", image)
	}
}

func (s *scanner) UpdateDatabase() {

	log.Info().Msg("Updating trivy database...")

	err := foundation.RunCommandWithArgsExtended(s.ctx, "/trivy", []string{"--quiet", "--light", "--download-db-only", "--no-progress", "--cache-dir", "/trivy-cache"})
	if err != nil {
		log.Error().Err(err).Msgf("Failed to update trivy database")
	}
}

type VulnerabilityReport struct {
	Target          string
	Vulnerabilities []Vulnerability
}

type Vulnerability struct {
	VulnerabilityID  string
	PkgName          string
	InstalledVersion string
	FixedVersion     string
	Severity         string
}
