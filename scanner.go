package main

import (
	"context"
	"strings"

	foundation "github.com/estafette/estafette-foundation"
	"github.com/rs/zerolog/log"
)

type Scanner interface {
	ScanImage(image string)
	RemoveImage(image string)
}

// NewScanner returns a new Scanner
func NewScanner(ctx context.Context) Scanner {
	return &scanner{
		ctx: ctx,
	}
}

type scanner struct {
	ctx context.Context
}

func (s *scanner) ScanImage(image string) {

	log.Info().Msgf("Scanning container image %v for vulnerabilities...", image)

	err := foundation.RunCommandWithArgsExtended(s.ctx, "/trivy", []string{"--light", "--no-progress", "--exit-code", "15", "--ignore-unfixed", "--cache-dir", "/trivy-cache", image})
	if err != nil {
		if strings.EqualFold(err.Error(), "exit status 1") {
			// ignore exit code, until trivy fixes this on their side, see https://github.com/aquasecurity/trivy/issues/8
			log.Warn().Msg("Ignoring Unknown OS error")
		} else {
			log.Error().Err(err).Msgf("Image %v has vulnerabilities!", image)
		}
	} else {
		log.Info().Msgf("Hurray, image %v has NO vulnerabilities", image)
	}
}

func (s *scanner) RemoveImage(image string) {

	log.Info().Msgf("Removing container image %v (not needed on this node)...", image)

	err := foundation.RunCommandWithArgsExtended(s.ctx, "/dod/docker", []string{"rmi", image})
	if err != nil {
		log.Error().Err(err).Msgf("Failed to remove image %v", image)
	} else {
		log.Info().Msgf("Succesfully remove image %v", image)
	}
}
